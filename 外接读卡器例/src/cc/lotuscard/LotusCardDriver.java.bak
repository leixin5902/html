package cc.lotuscard;

public class LotusCardDriver {

	// 寻卡请求类型 _eRequestType
	public final static int RT_ALL = 0x52; // /< 符合14443A卡片
	public final static int RT_NOT_HALT = 0x26; // /< 未进入休眠状态的卡
	// 密钥验证模式 _eAuthMode
	public final static int AM_A = 0x60; // /< 验证A密码
	public final static int AM_B = 0x61; // /< 验证B密码

	public LotusCardDriver() {
	}

	static {
		System.loadLibrary("LotusCardDriver");
	}

	/**
	 * 打开设备
	 * 
	 * @param strDeviceName
	 *            串口设备名称
	 * @param nVID
	 *            USB设备VID
	 * @param nPID
	 *            USB设备PID
	 * @return 设备句柄
	 */
	public native int OpenDevice(String strDeviceName, int nVID, int nPID);

	/**
	 * 关闭设备
	 * 
	 * @param nDeviceHandle
	 *            设备句柄
	 */
	public native void CloseDevice(int nDeviceHandle);

	/**
	 * 寻卡
	 * 
	 * @param nDeviceHandle
	 *            设备句柄
	 * @param nRequestType
	 *            请求类型
	 * @param tLotusCardParam
	 *            结果值 用里面的卡片类型
	 * @return true = 成功
	 */
	public native boolean Request(int nDeviceHandle, int nRequestType,
			LotusCardParam tLotusCardParam);

	/**
	 * 防冲突
	 * 
	 * @param nDeviceHandle
	 *            设备句柄
	 * @param tLotusCardParam
	 *            结果值 用里面的卡号
	 * @return true = 成功
	 */
	public native boolean Anticoll(int nDeviceHandle,
			LotusCardParam tLotusCardParam);

	/**
	 * 选卡
	 * 
	 * @param nDeviceHandle
	 *            设备句柄
	 * @param tLotusCardParam
	 *            参数(使用里面的卡号)与结果值(使用里面的卡容量大小)
	 * @return true = 成功
	 */
	public native boolean Select(int nDeviceHandle,
			LotusCardParam tLotusCardParam);

	/**
	 * 密钥验证
	 * 
	 * @param nDeviceHandle
	 *            设备句柄
	 * @param nAuthMode
	 *            验证模式
	 * @param nSectionIndex
	 *            扇区索引
	 * @param tLotusCardParam
	 *            参数(使用里面的卡号)
	 * @return true = 成功
	 */
	public native boolean Authentication(int nDeviceHandle, int nAuthMode,
			int nSectionIndex, LotusCardParam tLotusCardParam);

	/**
	 * 卡片中止响应
	 * 
	 * @param nDeviceHandle
	 *            设备句柄
	 * @return true = 成功
	 */
	public native boolean Halt(int nDeviceHandle);

	/**
	 * 读指定地址数据
	 * @param nDeviceHandle  设备句柄
	 * @param nAddress 块地址
	 * @param tLotusCardParam 结果值（读写缓冲）
	 * @return true = 成功
	 */
	public native boolean Read(int nDeviceHandle, int nAddress, LotusCardParam tLotusCardParam);
	
	/**
	 * 写指定地址数据
	 * @param nDeviceHandle 设备句柄
	 * @param nAddress 块地址
	 * @param tLotusCardParam 参数（读写缓冲）
	 * @return true = 成功
	 */
	public native boolean Write(int nDeviceHandle, int nAddress, LotusCardParam tLotusCardParam);
	
	/**
	 * 加值
	 * @param nDeviceHandle 设备句柄
	 * @param nAddress 块地址
	 * @param nValue 值
	 * @return true = 成功
	 */
	public native boolean Increment(int nDeviceHandle, int nAddress, int nValue);
	
	/**
	 * 减值
	 * @param nDeviceHandle 设备句柄
	 * @param nAddress 块地址
	 * @param nValue 值
	 * @return true = 成功
	 */
	public native boolean Decreament(int nDeviceHandle, int nAddress,int nValue);
	
	/**
	 * 装载密钥
	 * @param nDeviceHandle 设备句柄
	 * @param nAuthMode 验证模式
	 * @param nSectionIndex
	 *            扇区索引	 
	 * @param tLotusCardParam 参数（密钥）
	 * @return true = 成功
	 */
	public native boolean LoadKey(int nDeviceHandle,int nAuthMode,LotusCardParam tLotusCardParam);
	
	/**
	 * 蜂鸣
	 * @param nDeviceHandle 设备句柄
	 * @param nBeepLen 蜂鸣长度 毫秒为单位
	 * @return true = 成功
	 */
	public native boolean Beep(int nDeviceHandle, int nBeepLen);
}
